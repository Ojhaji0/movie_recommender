{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "72170c6b-2602-4a18-a8a2-8d79af798a68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Movies DataFrame head:\n",
      "   movie_id              title release_date  video_release_date  \\\n",
      "0         1   Toy Story (1995)  01-Jan-1995                 NaN   \n",
      "1         2   GoldenEye (1995)  01-Jan-1995                 NaN   \n",
      "2         3  Four Rooms (1995)  01-Jan-1995                 NaN   \n",
      "3         4  Get Shorty (1995)  01-Jan-1995                 NaN   \n",
      "4         5     Copycat (1995)  01-Jan-1995                 NaN   \n",
      "\n",
      "                                            imdb_url  unknown  Action  \\\n",
      "0  http://us.imdb.com/M/title-exact?Toy%20Story%2...        0       0   \n",
      "1  http://us.imdb.com/M/title-exact?GoldenEye%20(...        0       1   \n",
      "2  http://us.imdb.com/M/title-exact?Four%20Rooms%...        0       0   \n",
      "3  http://us.imdb.com/M/title-exact?Get%20Shorty%...        0       1   \n",
      "4  http://us.imdb.com/M/title-exact?Copycat%20(1995)        0       0   \n",
      "\n",
      "   Adventure  Animation  Children's  ...  Fantasy  Film-Noir  Horror  Musical  \\\n",
      "0          0          1           1  ...        0          0       0        0   \n",
      "1          1          0           0  ...        0          0       0        0   \n",
      "2          0          0           0  ...        0          0       0        0   \n",
      "3          0          0           0  ...        0          0       0        0   \n",
      "4          0          0           0  ...        0          0       0        0   \n",
      "\n",
      "   Mystery  Romance  Sci-Fi  Thriller  War  Western  \n",
      "0        0        0       0         0    0        0  \n",
      "1        0        0       0         1    0        0  \n",
      "2        0        0       0         1    0        0  \n",
      "3        0        0       0         0    0        0  \n",
      "4        0        0       0         1    0        0  \n",
      "\n",
      "[5 rows x 24 columns]\n",
      "\n",
      "Movies DataFrame info:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1682 entries, 0 to 1681\n",
      "Data columns (total 24 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   movie_id            1682 non-null   int64  \n",
      " 1   title               1682 non-null   object \n",
      " 2   release_date        1681 non-null   object \n",
      " 3   video_release_date  0 non-null      float64\n",
      " 4   imdb_url            1679 non-null   object \n",
      " 5   unknown             1682 non-null   int64  \n",
      " 6   Action              1682 non-null   int64  \n",
      " 7   Adventure           1682 non-null   int64  \n",
      " 8   Animation           1682 non-null   int64  \n",
      " 9   Children's          1682 non-null   int64  \n",
      " 10  Comedy              1682 non-null   int64  \n",
      " 11  Crime               1682 non-null   int64  \n",
      " 12  Documentary         1682 non-null   int64  \n",
      " 13  Drama               1682 non-null   int64  \n",
      " 14  Fantasy             1682 non-null   int64  \n",
      " 15  Film-Noir           1682 non-null   int64  \n",
      " 16  Horror              1682 non-null   int64  \n",
      " 17  Musical             1682 non-null   int64  \n",
      " 18  Mystery             1682 non-null   int64  \n",
      " 19  Romance             1682 non-null   int64  \n",
      " 20  Sci-Fi              1682 non-null   int64  \n",
      " 21  Thriller            1682 non-null   int64  \n",
      " 22  War                 1682 non-null   int64  \n",
      " 23  Western             1682 non-null   int64  \n",
      "dtypes: float64(1), int64(20), object(3)\n",
      "memory usage: 315.5+ KB\n",
      "\n",
      "Ratings DataFrame head:\n",
      "   user_id  movie_id  rating  timestamp\n",
      "0      196       242       3  881250949\n",
      "1      186       302       3  891717742\n",
      "2       22       377       1  878887116\n",
      "3      244        51       2  880606923\n",
      "4      166       346       1  886397596\n",
      "\n",
      "Cosine Similarity Matrix sample (first 5x5):\n",
      "movie_id         1         2        3         4         5\n",
      "movie_id                                                 \n",
      "1         1.000000  0.000000  0.00000  0.333333  0.000000\n",
      "2         0.000000  1.000000  0.57735  0.333333  0.333333\n",
      "3         0.000000  0.577350  1.00000  0.000000  0.577350\n",
      "4         0.333333  0.333333  0.00000  1.000000  0.333333\n",
      "5         0.000000  0.333333  0.57735  0.333333  1.000000\n",
      "\n",
      "--- Testing Content-Based Recommender ---\n",
      "\n",
      "Top 5 recommendations for 'Toy Story (1995)':\n",
      "1. Aladdin and the King of Thieves\n",
      "2. Aladdin\n",
      "3. Goofy Movie, A\n",
      "4. Jungle2Jungle\n",
      "5. Angels in the Outfield\n",
      "\n",
      "Top 5 recommendations for 'Star Wars (1977)':\n",
      "1. Return of the Jedi\n",
      "2. Empire Strikes Back, The\n",
      "3. Starship Troopers\n",
      "4. African Queen, The\n",
      "5. Judge Dredd\n",
      "\n",
      "Top 5 recommendations for 'Titanic (1997)':\n",
      "1. Cyrano de Bergerac\n",
      "2. Man in the Iron Mask, The\n",
      "3. Crying Game, The\n",
      "4. First Knight\n",
      "5. Piano, The\n",
      "Movie 'The Matrix' not found in the dataset. Please try another title.\n",
      "\n",
      "Top 5 recommendations for 'The Matrix':\n",
      "Movie 'Non Existent Movie (2000)' not found in the dataset. Please try another title.\n",
      "\n",
      "Top 5 recommendations for 'Non Existent Movie (2000)':\n"
     ]
    }
   ],
   "source": [
    "# Movie Recommender System (Content-Based)\n",
    "\n",
    "# Objective: Design a basic movie recommender using Python based on genres.\n",
    "# Dataset: MovieLens 100K\n",
    "\n",
    "# ----------------------------------------------------------------------------\n",
    "# 1. Import Libraries\n",
    "# ----------------------------------------------------------------------------\n",
    "import pandas as pd\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "import numpy as np\n",
    "import re # For regular expressions to clean movie titles\n",
    "\n",
    "# ----------------------------------------------------------------------------\n",
    "# 2. Load Data\n",
    "# ----------------------------------------------------------------------------\n",
    "\n",
    "# Define the file paths for the MovieLens 100K dataset\n",
    "# Make sure 'ml-100k' folder is in the same directory as your notebook\n",
    "MOVIES_FILE = 'Downloads/ml-100k/u.item'\n",
    "RATINGS_FILE = 'Downloads/ml-100k/u.data'\n",
    "\n",
    "# Load movies data (u.item)\n",
    "# The u.item file is tab-separated and has no header.\n",
    "# Columns: movie id | movie title | release date | video release date |\n",
    "#          IMDb URL | unknown | Action | Adventure | Animation |\n",
    "#          Children's | Comedy | Crime | Documentary | Drama | Fantasy |\n",
    "#          Film-Noir | Horror | Musical | Mystery | Romance | Sci-Fi |\n",
    "#          Thriller | War | Western\n",
    "# The last 19 columns are binary (0/1) for genres.\n",
    "\n",
    "# Column names based on u.item description\n",
    "movie_cols = ['movie_id', 'title', 'release_date', 'unknown', 'imdb_url'] + \\\n",
    "             ['genre_' + str(i) for i in range(19)] # Placeholder for genre columns\n",
    "movies_df = pd.read_csv(MOVIES_FILE, sep='|', names=movie_cols, encoding='latin-1')\n",
    "\n",
    "# The last 19 columns are the actual genre flags. Let's rename them correctly.\n",
    "# From the MovieLens 100K README (u.genre):\n",
    "genres = ['unknown', 'Action', 'Adventure', 'Animation', 'Children\\'s', 'Comedy',\n",
    "          'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror',\n",
    "          'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']\n",
    "movies_df.columns = ['movie_id', 'title', 'release_date', 'video_release_date', 'imdb_url'] + genres\n",
    "\n",
    "print(\"Movies DataFrame head:\")\n",
    "print(movies_df.head())\n",
    "print(\"\\nMovies DataFrame info:\")\n",
    "movies_df.info()\n",
    "\n",
    "# Load ratings data (u.data) - not strictly necessary for content-based,\n",
    "# but useful for finding popular movies for input, or for a hybrid approach.\n",
    "# Columns: user id | item id | rating | timestamp\n",
    "ratings_df = pd.read_csv(RATINGS_FILE, sep='\\t', names=['user_id', 'movie_id', 'rating', 'timestamp'])\n",
    "print(\"\\nRatings DataFrame head:\")\n",
    "print(ratings_df.head())\n",
    "\n",
    "# ----------------------------------------------------------------------------\n",
    "# 3. Preprocessing Data for Content-Based Filtering\n",
    "# ----------------------------------------------------------------------------\n",
    "\n",
    "# Extract year from title for cleaning (optional, but good practice for movie titles)\n",
    "# Example: \"Toy Story (1995)\" -> \"Toy Story\"\n",
    "movies_df['title_cleaned'] = movies_df['title'].apply(lambda x: re.sub(r'\\s*\\(\\d{4}\\)', '', x).strip())\n",
    "\n",
    "# Create a genre matrix\n",
    "# We'll use the 19 genre columns directly as our content features.\n",
    "# Drop non-genre related columns for the feature matrix\n",
    "genre_columns = genres[1:] # Exclude 'unknown' genre or decide how to handle it\n",
    "# For simplicity, let's use all 19 genre columns as they are already binary.\n",
    "genre_features = movies_df[genres]\n",
    "\n",
    "# In a more complex content-based system, you might use TF-IDF on keywords/descriptions.\n",
    "# Here, genres are already one-hot encoded and serve as direct features.\n",
    "\n",
    "# ----------------------------------------------------------------------------\n",
    "# 4. Calculate Cosine Similarity\n",
    "# ----------------------------------------------------------------------------\n",
    "\n",
    "# Calculate the cosine similarity between movies based on their genre features\n",
    "# If you used a TF-IDF vectorizer, you would apply cosine_similarity to its output.\n",
    "# Since genre_features are already binary vectors, we can directly compute similarity.\n",
    "cosine_sim_matrix = cosine_similarity(genre_features)\n",
    "\n",
    "# Convert the similarity matrix to a DataFrame for easier lookup\n",
    "cosine_sim_df = pd.DataFrame(cosine_sim_matrix, index=movies_df['movie_id'], columns=movies_df['movie_id'])\n",
    "\n",
    "print(\"\\nCosine Similarity Matrix sample (first 5x5):\")\n",
    "print(cosine_sim_df.iloc[:5, :5])\n",
    "\n",
    "# Create a mapping from movie title to movie ID for user input\n",
    "title_to_movie_id = pd.Series(movies_df.movie_id.values, index=movies_df.title_cleaned).to_dict()\n",
    "\n",
    "# Create a mapping from movie ID to title for output\n",
    "movie_id_to_title = pd.Series(movies_df.title_cleaned.values, index=movies_df.movie_id).to_dict()\n",
    "\n",
    "# ----------------------------------------------------------------------------\n",
    "# 5. Recommendation Function\n",
    "# ----------------------------------------------------------------------------\n",
    "\n",
    "def get_content_based_recommendations(movie_title, cosine_sim_df, movies_df, top_n=5):\n",
    "    \"\"\"\n",
    "    Recommends top_n similar movies based on content (genres).\n",
    "\n",
    "    Args:\n",
    "        movie_title (str): The title of the movie for which to get recommendations.\n",
    "        cosine_sim_df (pd.DataFrame): The precomputed cosine similarity matrix.\n",
    "        movies_df (pd.DataFrame): DataFrame containing movie information.\n",
    "        top_n (int): The number of top recommendations to return.\n",
    "\n",
    "    Returns:\n",
    "        list: A list of recommended movie titles.\n",
    "    \"\"\"\n",
    "    # Clean the input movie title to match the cleaned titles in the DataFrame\n",
    "    movie_title_cleaned = re.sub(r'\\s*\\(\\d{4}\\)', '', movie_title).strip()\n",
    "\n",
    "    if movie_title_cleaned not in title_to_movie_id:\n",
    "        print(f\"Movie '{movie_title}' not found in the dataset. Please try another title.\")\n",
    "        # Attempt a fuzzy match if direct match fails\n",
    "        # This is a basic fuzzy match, for production, consider libraries like fuzzywuzzy\n",
    "        matches = [t for t in title_to_movie_id.keys() if movie_title_cleaned.lower() in t.lower()]\n",
    "        if matches:\n",
    "            print(f\"Did you mean one of these? {matches[:5]}\")\n",
    "        return []\n",
    "\n",
    "    movie_id = title_to_movie_id[movie_title_cleaned]\n",
    "\n",
    "    # Get similarity scores for the given movie ID\n",
    "    sim_scores = cosine_sim_df[movie_id].sort_values(ascending=False)\n",
    "\n",
    "    # Exclude the movie itself from recommendations\n",
    "    sim_scores = sim_scores[sim_scores.index != movie_id]\n",
    "\n",
    "    # Get the top N similar movies\n",
    "    top_similar_movies = sim_scores.head(top_n)\n",
    "\n",
    "    # Get the titles of the recommended movies\n",
    "    recommended_movie_titles = [movie_id_to_title[m_id] for m_id in top_similar_movies.index]\n",
    "\n",
    "    return recommended_movie_titles\n",
    "\n",
    "# ----------------------------------------------------------------------------\n",
    "# 6. Test the Recommender\n",
    "# ----------------------------------------------------------------------------\n",
    "\n",
    "print(\"\\n--- Testing Content-Based Recommender ---\")\n",
    "\n",
    "# Example 1: Recommend movies similar to 'Toy Story (1995)'\n",
    "input_movie_1 = \"Toy Story (1995)\"\n",
    "recommended_movies_1 = get_content_based_recommendations(input_movie_1, cosine_sim_df, movies_df)\n",
    "print(f\"\\nTop 5 recommendations for '{input_movie_1}':\")\n",
    "if recommended_movies_1:\n",
    "    for i, movie in enumerate(recommended_movies_1):\n",
    "        print(f\"{i+1}. {movie}\")\n",
    "\n",
    "# Example 2: Recommend movies similar to 'Star Wars (1977)'\n",
    "input_movie_2 = \"Star Wars (1977)\"\n",
    "recommended_movies_2 = get_content_based_recommendations(input_movie_2, cosine_sim_df, movies_df)\n",
    "print(f\"\\nTop 5 recommendations for '{input_movie_2}':\")\n",
    "if recommended_movies_2:\n",
    "    for i, movie in enumerate(recommended_movies_2):\n",
    "        print(f\"{i+1}. {movie}\")\n",
    "\n",
    "# Example 3: Recommend movies similar to 'Titanic (1997)'\n",
    "input_movie_3 = \"Titanic (1997)\"\n",
    "recommended_movies_3 = get_content_based_recommendations(input_movie_3, cosine_sim_df, movies_df)\n",
    "print(f\"\\nTop 5 recommendations for '{input_movie_3}':\")\n",
    "if recommended_movies_3:\n",
    "    for i, movie in enumerate(recommended_movies_3):\n",
    "        print(f\"{i+1}. {movie}\")\n",
    "\n",
    "# Example 4: A movie that might not be in the exact format or present\n",
    "input_movie_4 = \"The Matrix\" # No year specified in this example\n",
    "recommended_movies_4 = get_content_based_recommendations(input_movie_4, cosine_sim_df, movies_df)\n",
    "print(f\"\\nTop 5 recommendations for '{input_movie_4}':\")\n",
    "if recommended_movies_4:\n",
    "    for i, movie in enumerate(recommended_movies_4):\n",
    "        print(f\"{i+1}. {movie}\")\n",
    "\n",
    "input_movie_5 = \"Non Existent Movie (2000)\"\n",
    "recommended_movies_5 = get_content_based_recommendations(input_movie_5, cosine_sim_df, movies_df)\n",
    "print(f\"\\nTop 5 recommendations for '{input_movie_5}':\")\n",
    "if recommended_movies_5:\n",
    "    for i, movie in enumerate(recommended_movies_5):\n",
    "        print(f\"{i+1}. {movie}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39a706e8-16bd-4722-b977-350914afcae0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/bin/bash: /home/ojha/anaconda3/lib/libtinfo.so.6: no version information available (required by /bin/bash)\n",
      "\n",
      "Collecting usage statistics. To deactivate, set browser.gatherUsageStats to false.\n",
      "\u001b[0m\n",
      "\u001b[0m\n",
      "\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n",
      "\u001b[0m\n",
      "\u001b[34m  Local URL: \u001b[0m\u001b[1mhttp://localhost:8502\u001b[0m\n",
      "\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://172.17.108.144:8502\u001b[0m\n",
      "\u001b[34m  External URL: \u001b[0m\u001b[1mhttp://119.226.50.194:8502\u001b[0m\n",
      "\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!streamlit run app.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fa6ff27b-45de-4d6a-9654-835ba8afc540",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "✅ Model and data saved successfully!\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "# Save everything needed for recommendation\n",
    "joblib.dump(cosine_sim_df, 'cosine_sim_df.pkl')\n",
    "joblib.dump(movies_df, 'movies_df.pkl')\n",
    "joblib.dump(title_to_movie_id, 'title_to_movie_id.pkl')\n",
    "joblib.dump(movie_id_to_title, 'movie_id_to_title.pkl')\n",
    "\n",
    "print(\"\\n✅ Model and data saved successfully!\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edea7ae0-61a1-4d59-b8b4-b58bdb6589b7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tensorflow",
   "language": "python",
   "name": "tensorflow"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
